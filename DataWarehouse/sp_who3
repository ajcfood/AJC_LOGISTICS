USE [AJCDW]
GO
/****** Object:  StoredProcedure [dbo].[Sp_Who3]    Script Date: 5/21/2019 11:03:59 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[Sp_Who3] AS

DECLARE @Full tinyint = 0

BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

IF @Full = 1
Begin
       SELECT
              SPID                = er.session_id
              ,BlkBy              = er.blocking_session_id
              ,Snapshot                  = case when st.Is_Snapshot is null then 0 else st.is_snapshot end
              --,cast(datediff(s, er.start_time, getdate())/60.0 as dec(9,2)) AS [ElapsedMin]      
              ,CONVERT(varchar, datediff(ss, er.start_time, getdate()) / 86400 ) + ':' + -- Days
       CONVERT(varchar, DATEADD(ss, datediff(ss, er.start_time, getdate()), 0), 108) as [D:HH:MM:SS]
              --,ElapsedMS          = er.total_elapsed_time
              ,SnapshotSeconds     = case when st.elapsed_time_seconds is null then 0 else st.elapsed_time_seconds end
              ,er.open_transaction_count AS Transactions
              ,CPU                = er.cpu_time
              ,IOReads            = er.logical_reads + er.reads
              ,IOWrites           = er.writes     
              ,Executions         = ec.execution_count  
              ,CommandType        = er.command         
              ,ObjectName         = OBJECT_SCHEMA_NAME(qt.objectid,qt.dbid) + '.' + OBJECT_NAME(qt.objectid, qt.dbid)  
              ,SQLStatement       = cast((
       
              SELECT  REPLACE
                                                              (
                                                                     REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                                                     REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                                                     REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                                                     N'<?query --' + NCHAR(13) + NCHAR(10) +
                                                                           CASE 
                                                                                  WHEN LEN(qt.text) < (er.statement_end_offset / 2) + 1 THEN qt.text
                                                                                  WHEN SUBSTRING(qt.text, (er.statement_start_offset/2), 2) LIKE N'[a-zA-Z0-9][a-zA-Z0-9]' THEN qt.text
                                                                                  ELSE
                                                                                         CASE
                                                                                                WHEN er.statement_start_offset > 0 THEN
                                                                                                       SUBSTRING
                                                                                                       (
                                                                                                              qt.text,
                                                                                                              ((er.statement_start_offset/2) + 1),
                                                                                                              (
                                                                                                                     CASE
                                                                                                                            WHEN er.statement_end_offset = -1 THEN 2147483647
                                                                                                                            ELSE ((er.statement_end_offset - er.statement_start_offset)/2) + 1
                                                                                                                     END
                                                                                                              )
                                                                                                       )
                                                                                                ELSE RTRIM(LTRIM(qt.text))
                                                                                         END
                                                                           END + NCHAR(13) + NCHAR(10) + N'--?>'COLLATE Latin1_General_Bin2,
                                                                           NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
                                                                           NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
                                                                           NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
                                                                     NCHAR(0),
                                                                     N'')  
                                                for xml path(''), root('MyString'), type 
                                                ).value('/MyString[1]','varchar(max)') as XML)

                 /* SUBSTRING
                     (
                           qt.text,
                           er.statement_start_offset/2,
                           (CASE WHEN er.statement_end_offset = -1
                                  THEN LEN(CONVERT(nvarchar(MAX), qt.text)) * 2
                                  ELSE er.statement_end_offset
                                  END - er.statement_start_offset)/2
                     )        */
              ,ep.query_plan as [QueryPlan]
              ,STATUS             = ses.STATUS
              ,[Login]            = ses.login_name
              ,Host               = ses.host_name
              ,DBName             = DB_Name(er.database_id)
              ,LastWaitType       = er.last_wait_type
              ,StartTime          = er.start_time
              ,Protocol           = con.net_transport
              ,transaction_isolation =
                     CASE ses.transaction_isolation_level
                           WHEN 0 THEN 'Unspecified'
                           WHEN 1 THEN 'Read Uncommitted'
                           WHEN 2 THEN 'Read Committed'
                           WHEN 3 THEN 'Repeatable'
                           WHEN 4 THEN 'Serializable'
                           WHEN 5 THEN 'Snapshot'
                     END
              ,ConnectionWrites   = con.num_writes
              ,ConnectionReads    = con.num_reads
              ,ClientAddress      = con.client_net_address
              ,Authentication     = con.auth_scheme
              ,CONVERT(NUMERIC(6,2),er.PERCENT_COMPLETE) AS [PERCENT COMPLETE]
              ,CONVERT(VARCHAR(20),DATEADD(MS,eR.ESTIMATED_COMPLETION_TIME,GETDATE()),20) AS [ETA COMPLETION TIME]
              ,CONVERT(NUMERIC(8,2),eR.ESTIMATED_COMPLETION_TIME/1000.0/60.0) AS [ETA MIN]
              ,CONVERT(NUMERIC(8,2),eR.ESTIMATED_COMPLETION_TIME/1000.0/60.0/60.0) AS [ETA HOURS]
       FROM sys.dm_exec_requests er
       LEFT JOIN sys.dm_exec_sessions ses
       ON ses.session_id = er.session_id
       left join sys.dm_tran_active_snapshot_database_transactions st on er.session_id = st.session_id
       LEFT JOIN sys.dm_exec_connections con
       ON con.session_id = ses.session_id
       CROSS APPLY sys.dm_exec_sql_text(er.sql_handle) AS qt
       OUTER APPLY 
       (
              SELECT execution_count = MAX(cp.usecounts)
              FROM sys.dm_exec_cached_plans cp
              WHERE cp.plan_handle = er.plan_handle
       ) ec
       OUTER APPLY sys.dm_exec_query_plan(er.plan_handle) ep 
       ORDER BY
              er.blocking_session_id DESC,
              er.logical_reads + er.reads DESC,
              er.session_id

end
Else
Begin

       SELECT
              SPID                = er.session_id
              ,BlkBy              = er.blocking_session_id
              ,Snapshot                  = case when st.Is_Snapshot is null then 0 else st.is_snapshot end
              --,cast(datediff(s, er.start_time, getdate())/60.0 as dec(9,2)) AS [ElapsedMin]      
              ,CONVERT(varchar, datediff(ss, er.start_time, getdate()) / 86400 ) + ':' + -- Days
              CONVERT(varchar, DATEADD(ss, datediff(ss, er.start_time, getdate()), 0), 108) as [D:HH:MM:SS]
              --,ElapsedMS          = er.total_elapsed_time
              --,er.open_transaction_count AS Transactions
              ,CPU                = er.cpu_time
              ,IOReads            = er.logical_reads + er.reads
              ,IOWrites           = er.writes     
          -- ,Executions         = ec.execution_count  
              ,CommandType        = er.command         
              ,ObjectName         = OBJECT_SCHEMA_NAME(qt.objectid,qt.dbid) + '.' + OBJECT_NAME(qt.objectid, qt.dbid)  
              ,SQLStatement       = cast((
       
              SELECT  REPLACE
                                                              (
                                                                     REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                                                     REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                                                     REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                                                     N'<?query --' + NCHAR(13) + NCHAR(10) +
                                                                           CASE 
                                                                                  WHEN LEN(qt.text) < (er.statement_end_offset / 2) + 1 THEN qt.text
                                                                                  WHEN SUBSTRING(qt.text, (er.statement_start_offset/2), 2) LIKE N'[a-zA-Z0-9][a-zA-Z0-9]' THEN qt.text
                                                                                  ELSE
                                                                                         CASE
                                                                                                WHEN er.statement_start_offset > 0 THEN
                                                                                                       SUBSTRING
                                                                                                       (
                                                                                                              qt.text,
                                                                                                              ((er.statement_start_offset/2) + 1),
                                                                                                              (
                                                                                                                     CASE
                                                                                                                            WHEN er.statement_end_offset = -1 THEN 2147483647
                                                                                                                            ELSE ((er.statement_end_offset - er.statement_start_offset)/2) + 1
                                                                                                                     END
                                                                                                              )
                                                                                                       )
                                                                                                ELSE RTRIM(LTRIM(qt.text))
                                                                                         END
                                                                           END + NCHAR(13) + NCHAR(10) + N'--?>'COLLATE Latin1_General_Bin2,
                                                                           NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
                                                                           NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
                                                                           NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
                                                                     NCHAR(0),
                                                                     N'')  
                                                for xml path(''), root('MyString'), type 
                                                ).value('/MyString[1]','varchar(max)') as XML)

                 /* SUBSTRING
                     (
                           qt.text,
                           er.statement_start_offset/2,
                           (CASE WHEN er.statement_end_offset = -1
                                  THEN LEN(CONVERT(nvarchar(MAX), qt.text)) * 2
                                  ELSE er.statement_end_offset
                                  END - er.statement_start_offset)/2
                     )        */
              --,ep.query_plan as [QueryPlan]
              --,STATUS             = ses.STATUS
              ,[Login]            = ses.login_name
              ,Host               = ses.host_name
              ,DBName             = DB_Name(er.database_id)
              ,LastWaitType       = er.last_wait_type
          -- ,StartTime          = er.start_time
              --,Protocol           = con.net_transport
              --,transaction_isolation =
              --    CASE ses.transaction_isolation_level
              --        WHEN 0 THEN 'Unspecified'
              --        WHEN 1 THEN 'Read Uncommitted'
              --        WHEN 2 THEN 'Read Committed'
              --        WHEN 3 THEN 'Repeatable'
              --        WHEN 4 THEN 'Serializable'
              --        WHEN 5 THEN 'Snapshot'
              --    END
              --,ConnectionWrites   = con.num_writes
              --,ConnectionReads    = con.num_reads
              --,ClientAddress      = con.client_net_address
              --,Authentication     = con.auth_scheme
              --,CONVERT(NUMERIC(6,2),er.PERCENT_COMPLETE) AS [PERCENT COMPLETE]
              --,CONVERT(VARCHAR(20),DATEADD(MS,eR.ESTIMATED_COMPLETION_TIME,GETDATE()),20) AS [ETA COMPLETION TIME]
              --,CONVERT(NUMERIC(8,2),eR.ESTIMATED_COMPLETION_TIME/1000.0/60.0) AS [ETA MIN]
              --,CONVERT(NUMERIC(8,2),eR.ESTIMATED_COMPLETION_TIME/1000.0/60.0/60.0) AS [ETA HOURS]
       FROM sys.dm_exec_requests er
       LEFT JOIN sys.dm_exec_sessions ses
       ON ses.session_id = er.session_id
       left join sys.dm_tran_active_snapshot_database_transactions st on er.session_id = st.session_id
       --LEFT JOIN sys.dm_exec_connections con
       --ON con.session_id = ses.session_id
       CROSS APPLY sys.dm_exec_sql_text(er.sql_handle) AS qt
       --OUTER APPLY 
       --(
       --    SELECT execution_count = MAX(cp.usecounts)
       --    FROM sys.dm_exec_cached_plans cp
       --    WHERE cp.plan_handle = er.plan_handle
       --) ec
       --OUTER APPLY sys.dm_exec_query_plan(er.plan_handle) ep 
       ORDER BY
              er.blocking_session_id DESC,
              er.logical_reads + er.reads DESC,
              er.session_id

END
END
