@using AJC.Logistics.SeaWideExpress.QuotingTool.Models
@model AJC.Logistics.SeaWideExpress.QuotingTool.Business.FeesByTypeModel

<link rel="stylesheet" href="~/assets/styles/index.css" />

<br />

<h3 style="text-align:center;">Fees by Type</h3>

<nav class="navbar navbar-light" style="background-color: rgb(245, 247, 247); padding: 6px 10px; border: 1px solid rgb(189, 195, 199); border-bottom: none; ">
    <div>
        <span><b>State</b></span>&nbsp;
        @Html.DropDownListFor(m => m.State, new SelectList(Model.States, "StateID", "Name"), "--All--", 
            new {style = "width: 100px"@*, @class = "form-select" *@})
        &nbsp;&nbsp;
        <span><b>Fee Type</b></span>&nbsp;
        @Html.DropDownListFor(m => m.FeeType, new SelectList(Model.FeeTypes, "FeeTypeID", "Name"), "--All--", 
            new { style = "width: 100px"@*, @class = "form-select" *@})
        &nbsp;
        @Html.DropDownListFor(m => m.FeeSubType, new SelectList(Model.FeeSubTypes, "FeeTypeID", "Name"), "--All--",
            new {style = "width: 150px", data_url = Url.Action("GetFeeSubTypes")@*, @class = "form-select"*@})
        &nbsp;&nbsp;
        <span><b>Show Customers</b></span>&nbsp;
        <label class="switch">
            <input type="checkbox">
            <span class="slider round"></span>
        </label>
        &nbsp;&nbsp;
        <span><b>Period</b></span>&nbsp;<select id="Period"><option>2020</option><option>2021</option></select>
    </div>   
    <div class="form-inline">
        <button class="btn btn-outline-danger my-2 my-sm-0" id="btnRemoveFee">Remove</button>
        <button class="btn btn-outline-success my-2 my-sm-0" id="btnAddFee" disabled>Add</button>
    </div>
</nav>

<div style="width:100%; height:300px">
    @Html.Partial("~/Views/Shared/_FeesGrid.cshtml", Model.FeesModel)
</div>

<nav class="navbar navbar-light" style="background-color: rgb(245, 247, 247); padding: 6px 10px 10px 10px; border: 1px solid rgb(189, 195, 199); border-top: none; ">
    <div style="margin: 10px 0">
        <span><b>Ranges by</b></span>&nbsp;<select id="ByUomIDs"><option>Unit</option></select>
    </div>
    <div class="form-inline">
        <button class="btn btn-outline-danger my-2 my-sm-0" id="btnRemoveRange">Remove</button>
        <button class="btn btn-outline-success my-2 my-sm-0" id="btnAddRange">Add</button>
    </div>

    <div style="width:100%; height:150px">
        @Html.Partial("~/Views/Shared/_FeesGrid.cshtml", Model.RangesModel)
    </div>
</nav>

<script>
    $(function () {
        const filters = {ParentFeeID: null, StateID: @(Model.State)};

        function handleFilterChanged(field, value) {
            if (!value || value === "--All--")
                filters[field] = null;
            else
                filters[field] = value;

            const disabled = !filters.FeeTypeID || !filters.StateID;
            $("#btnAddFee").prop('disabled', disabled);
            //$("#btnRemoveFee").prop('disabled', disabled);

            const grid = agGridManager.getGrid('myGridFees');
            if (grid) {
                grid.datasource.setWhere(filters);
                grid.api.refreshServerSideStore();
            }
        }

        function handleStateChanged() {
            handleFilterChanged("StateID", $("#State").val());
        }

        function handleFeeTypeChanged() {
            var feeTypeID = $(this).val();

            // Refreshes the sub types
            var url = $("#FeeSubType").data("url") + '?feeTypeID=' + feeTypeID;
            var $feeSubType = $("#FeeSubType");
            $.getJSON(url, function (data) {
                $feeSubType.empty();
                if (data.length > 0) {
                    $.each(data, function (i, item) {
                        $feeSubType.append($("<option>").text(item.Text).val(item.Value));
                    });
                } else {
                    $feeSubType.append($("<option>").text("--All--"));
                }

                // Forces a sub type changes validation
                handleFeeSubTypeChanged();
            });
        }

        function handleFeeSubTypeChanged() {
            handleFilterChanged("FeeTypeID", $("#FeeSubType").val());
        }

        function handlePeriodChanged() {
            handleFilterChanged("Period", $("#Period").val());
        }

        function handleByOmsIDsChanged() {
            const grid = agGridManager.getGrid('myGridRanges');
            if (grid) {
                grid.datasource.setWhere({ ParentFeeID: focusedRow ? focusedRow.FeeID : null , ByUomID: $("#ByUomIDs").val()});
                grid.api.refreshServerSideStore();
            }
        }

        $("#State").change(handleStateChanged);
        $("#FeeType").change(handleFeeTypeChanged);
        $("#FeeSubType").change(handleFeeSubTypeChanged);
        $("#Period").change(handlePeriodChanged);
        $("#ByUomIDs").change(handleByOmsIDsChanged);

        let lastId = -1;
        function handleRemoveFees(id) {
            return function () {
                const grid = agGridManager.getGrid(id);
                if (!grid) alert('matanga!!!');
                const selectedRows = grid.api.getSelectedRows();
                let selectedIds = selectedRows.map((item) => (item.FeeID)).filter((id) => (id >= 0));
                if (selectedIds.length) agGridManager.updateEntity(selectedIds, '@Url.Action("removeFeeData", "FeesGrid")');
                grid.api.applyServerSideTransaction({ remove: selectedRows });
            }
        }

        $("#btnAddFee").click(function () {
            const grid = agGridManager.getGrid('myGridFees');
            if (!grid) alert('matanga!!!');
            grid.api.applyServerSideTransaction({
                add: [{ FeeID: lastId--, FeeTypeID: filters.FeeTypeID, StateID: filters.StateID }]
            });
        });

        $("#btnRemoveFee").click(handleRemoveFees('myGridFees'));

        $("#btnAddRange").click(function () {
            const grid = agGridManager.getGrid('myGridRanges');
            if (!grid) alert('matanga!!!');
            const newRow = {};
            Object.assign(newRow, focusedRow);
            newRow.FeeID = lastId--;
            newRow.ParentFeeID = focusedRow.FeeID;
            grid.api.applyServerSideTransaction({ add: [newRow] });
        });

        $("#btnRemoveRange").click(handleRemoveFees('myGridRanges'));

        let focusedRowIndex = undefined;
        let focusedRow = undefined;

        function handleRowFocused(event) {
            focusedRowIndex = event.rowIndex;
            if (focusedRowIndex === undefined || focusedRowIndex < 0) return;
            const node = event.api.getDisplayedRowAtIndex(focusedRowIndex);
            focusedRow = node ? node.data : null;

            const grid = agGridManager.getGrid('myGridRanges');
            if (!grid) alert('matanga!!!');

            handleControls(focusedRow ? focusedRow.FeeID : null);
            grid.datasource.setWhere({ ParentFeeID: focusedRow ? focusedRow.FeeID : null });
            grid.api.refreshServerSideStore();
        }

        function handleCellFocused(event) {
            if (focusedRowIndex !== event.rowIndex) handleRowFocused(event);
        }

        function handleControls(rowID) {
            $.getJSON('@Url.Action("getUomsByFeeID", "Params")?ParentFeeID=' + rowID, function (data) {
                $("#ByUomIDs").html('');
                $("#ByUomIDs").append($("<option>").text("--All--"));
                $.each(data, function () {
                    $("#ByUomIDs").append('<option value="' + this.value + '">' + this.label + '</option>');
                });
            });
        }

        agGridManager.onGridReady(function (grid) {
            grid.api.addEventListener('cellFocused', handleCellFocused);
        }, 'myGridFees');
    });
</script>
