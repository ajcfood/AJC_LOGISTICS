@model AJC.Logistics.SeaWideExpress.QuotingTool.Business.AGGridConfigurationModel

<script src="~/assets/ag-grid/ag-grid-enterprise.min.js"></script>
<script src="~/assets/ag-grid/ag-grid-servermanager.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
<script src="~/assets/typeahead/typeahead.bundle.js"></script>
<script src="~/assets/ag-grid/ag-grid-typeahead.js"></script>
<link rel="stylesheet" href="~/assets/ag-grid/ag-grid-typeahead.css" />
<div id="myGrid" style="height: 600px;width:100%;" class="ag-theme-balham"></div>


<script>
    var agServerSideManagement = new AGGridManager();
    var columnDefs;

    function fetchLOV(endpointName) {
        let requestedRows = [];
        $.ajax({
            url: endpointName,
            dataType: "json",
            type: "GET",
            async: false,
            cache: false,
            success: function (rows) {
                requestedRows = rows;
            },
            error: function (xhr) {
                alert(JSON.stringify(xhr));
            }
        });
        return requestedRows;
    }

    const states = fetchLOV('@Url.Action("getStates", "AG")');
    /*[
        { label: "HAWAII", value: "HI" },
        { label: "ALASKA", value: "AK" }
    ];*/

    const islands = fetchLOV('@Url.Action("getIslands", "AG")');
    /*[
        { label: "LINEAI", value: 1 },
        { label: "MOLUKAI", value: 2 }
    ];*/

    const cities = fetchLOV('@Url.Action("getCities", "AG")');

    function newSource(list, valueField = "value", displayField = "label") {
        return new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace(displayField),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            identify: (obj) => (obj[valueField]),
            local: list
        });
    }

    function newStore(name, list, valueField = "value", displayField = "label", limit = 10) {
        return {
            name, limit,
            display: displayField,
            source: newSource(list, valueField, displayField)
        };
    }

    function typeaheadFormatter(store) {
        return function (params) {
            var { value } = params;

            if (!value) return "";

            if (typeof value !== 'object') value = store.source.get([value])[0];

            if (!value) return "";

            return value[store.display || "label"];
        }
    }

    const statesStore  = newStore('states', states);
    const islandsStore = newStore('islands', islands);
    const citiesStore  = newStore('cities', cities);

    @if(Model.GridMode == AJC.Logistics.SeaWideExpress.QuotingTool.Business.AGGridConfigurationModel.Mode.Ranges)
    {
        <text>
        columnDefs = [
            { headerName: "id", field: "id", hide: true },
            {
                headerName: "State", field: "state",
                cellEditor: TypeaheadEditor,
                cellEditorParams: {
                    placeholder: 'State',
                    store: statesStore
                },
                valueFormatter: typeaheadFormatter(statesStore)
            },
            {
                headerName: "Island", field: "island",
                cellEditor: TypeaheadEditor,
                cellEditorParams: {
                    placeholder: 'Island',
                    store: islandsStore
                },
                valueFormatter: typeaheadFormatter(islandsStore)
            },
            { headerName: "Zone", field: "zone", cellEditor: "agRichSelectCellEditor", cellEditorParams: { values: ['bari', 'jorgito', 'jorge', 4, 5] } },
            {
                headerName: "City", field: "city",
                cellEditor: TypeaheadEditor,
                cellEditorParams: {
                    placeholder: 'City',
                    store: citiesStore
                },
                valueFormatter: typeaheadFormatter(citiesStore)
            },
            { headerName: "Zip Codes", field: "zipCodes" },
            { headerName: "Fee", field: "fee" },
            { headerName: "Discount", field: "discount" },
            { headerName: "Min", field: "feeMin" },
            { headerName: "Max", field: "feeMax" }
        ];
        </text>
    }
    // let the grid know which columns has to use.
    var gridOptions = {
        columnDefs: columnDefs,
        defaultColDef: {
            sortable: true,
            filter: true,
            editable: true,
            flex: 1,
            minWidth: 100,
            onCellValueChanged: (params) => { agServerSideManagement.saveChanges('@Model.GridMode', params); }
        },
        // use the server-side row model instead of the default 'client-side'.
        rowModelType: 'serverSide',
        serverSideStoreType: 'partial',
        // items to take by request.
        cacheBlockSize: 4,
        // enables pagination in the grid
        pagination: true,
        // sets rows qunatity to show per page (default is 100)
        paginationPageSize: 4,
        undoRedoCellEditing: true,
        undoRedoCellEditingLimit: 20
    };

    var _endPoint = '@Url.Action("getFeeData", "AG")';


    document.addEventListener('DOMContentLoaded', function () {
        var gridDiv = document.querySelector('#myGrid');
        agGrid.Grid(gridDiv, gridOptions);
        // setup the server with a first call.
        var server = agServerSideManagement.createServer(_endPoint);
        // create datasource with a reference to the server.
        var datasource = agServerSideManagement.createServerSideDatasource(server);
        // set serverside datasource.
        gridOptions.api.setServerSideDatasource(datasource);
    });
</script>