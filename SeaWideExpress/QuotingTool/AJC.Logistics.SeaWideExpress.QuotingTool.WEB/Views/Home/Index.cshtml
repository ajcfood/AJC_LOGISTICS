@using AJC.Logistics.SeaWideExpress.QuotingTool.Models
@model AJC.Logistics.SeaWideExpress.QuotingTool.Business.RatesAndRangesModel

<link rel="stylesheet" href="~/assets/styles/index.css" />

<br />

<h3 style="text-align:center;">Fees by Type</h3>

<nav class="navbar navbar-light" style="background-color: rgb(245, 247, 247); padding: 6px 10px; border: 1px solid rgb(189, 195, 199); border-bottom: none; ">
    <div>
        <span><b>State</b></span>&nbsp;
        @Html.DropDownListFor(m => m.State, new SelectList(Model.States, "StateID", "Name"), "--Select--", 
            new {style = "width: 100px"@*, @class = "form-select" *@})
        &nbsp;&nbsp;
        <span><b>Fee Type</b></span>&nbsp;
        @Html.DropDownListFor(m => m.FeeType, new SelectList(Model.FeeTypes, "FeeTypeID", "Name"), "--Select--", 
            new { style = "width: 100px"@*, @class = "form-select" *@})
        &nbsp;
        @Html.DropDownListFor(m => m.FeeSubType, new SelectList(Model.FeeSubTypes, "FeeTypeID", "Name"), "--Select--",
            new {style = "width: 150px", data_url = Url.Action("GetFeeSubTypes")@*, @class = "form-select"*@})
        &nbsp;&nbsp;
        <span><b>Show Customers</b></span>&nbsp;
        <label class="switch">
            <input type="checkbox">
            <span class="slider round"></span>
        </label>
        &nbsp;&nbsp;
        <span><b>Period</b></span>&nbsp;<select><option>2020</option><option>2021</option></select>
    </div>   
    <div class="form-inline">
        <button class="btn btn-outline-danger my-2 my-sm-0" id="btnRemoveFee">Remove</button>
        <button class="btn btn-outline-success my-2 my-sm-0" id="btnAddFee">Add</button>
    </div>
</nav>

<div style="width:100%; height:300px">
    @Html.Partial("~/Views/Shared/_RatesAndRanges.cshtml", Model.RatesModel)
</div>

<nav class="navbar navbar-light" style="background-color: rgb(245, 247, 247); padding: 6px 10px 10px 10px; border: 1px solid rgb(189, 195, 199); border-top: none; ">
    <div style="margin: 10px 0">
        <span><b>Ranges by</b></span>&nbsp;<select><option>Unit</option></select>
    </div>
    <div class="form-inline">
        <button class="btn btn-outline-danger my-2 my-sm-0" id="btnRemoveRange">Remove</button>
        <button class="btn btn-outline-success my-2 my-sm-0" id="btnAddRange">Add</button>
    </div>

    <div style="width:100%; height:150px">
        @Html.Partial("~/Views/Shared/_RatesAndRanges.cshtml", Model.RangesModel)
    </div>
</nav>

<script>
    $(function () {
        function handleFeeTypeChanged() {
            const feeSubType = $("#FeeSubType").val();
            const disabled = !feeSubType || feeSubType === "--Select--";
            $("#btnAddFee").prop('disabled', disabled);
            $("#btnRemoveFee").prop('disabled', disabled);
        }

        $("#FeeType").change(function () {
            var feeTypeID = $(this).val();
            var url = $("#FeeSubType").data("url") + '?feeTypeID=' + feeTypeID;
            var $feeSubType = $("#FeeSubType");
            $.getJSON(url, function (data) {
                $feeSubType.empty();
                if (data.length > 0) {
                    $.each(data, function (i, item) {
                        $feeSubType.append($("<option>").text(item.Text).val(item.Value));
                    });
                } else {
                    $feeSubType.append($("<option>").text("--Select--"));
                }
                handleFeeTypeChanged();
            });
        });

        $("#FeeSubType").change(handleFeeTypeChanged);

        let lastId = -1;
        $("#btnAddFee").click(function () {
            const grid = agGridManager.getGrid('myGridRates');
            if (!grid) alert('matanga!!!');
            grid.api.applyServerSideTransaction({
                add: [{ FeeID: lastId-- }]
            });
        });

        $("#btnRemoveFee").click(function () {
            const grid = agGridManager.getGrid('myGridRates');
            if (!grid) alert('matanga!!!');
            const selectedRows = grid.api.getSelectedRows();
			let selectedRowsMaps = selectedRows.map(function (item) {
                return item.FeeID;
            });

            agGridManager.updateEntity(selectedRowsMaps, '@Url.Action("removeFeeData", "AG")');	
            grid.api.applyServerSideTransaction({remove: selectedRows});
        });


        let focusedRow = undefined;
        function handleRowFocused(event) {
            focusedRow = event.rowIndex;
            if (focusedRow === undefined || focusedRow < 0) return;
            const node = event.api.getDisplayedRowAtIndex(focusedRow);
            const row  = node ? node.data : null;

            const grid = agGridManager.getGrid('myGridRanges');
            if (!grid) alert('matanga!!!');

            grid.datasource.setWhere({ ParentFeeID: row ? row.FeeID : null });
            grid.api.refreshServerSideStore();
        }

        function handleCellFocused(event) {
            if (focusedRow !== event.rowIndex) handleRowFocused(event);
        }

        agGridManager.onGridReady(function (grid) {
            grid.api.addEventListener('cellFocused', handleCellFocused);
        }, 'myGridRates');
    });
</script>
